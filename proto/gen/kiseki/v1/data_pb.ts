// @generated by protobuf-ts 2.2.3 with parameter generate_dependencies,ts_nocheck,add_pb_suffix,optimize_code_size
// @generated from protobuf file "kiseki/v1/data.proto" (package "kiseki.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message kiseki.v1.Game
 */
export interface Game {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: repeated kiseki.v1.Character characters = 2;
     */
    characters: Character[];
    /**
     * @generated from protobuf field: repeated kiseki.v1.MasterQuartz master_quartz = 4;
     */
    masterQuartz: MasterQuartz[];
    /**
     * @generated from protobuf field: repeated kiseki.v1.Quartz quartz = 5;
     */
    quartz: Quartz[];
    /**
     * @generated from protobuf field: repeated kiseki.v1.Art arts = 6;
     */
    arts: Art[];
}
/**
 * @generated from protobuf message kiseki.v1.Character
 */
export interface Character {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: uint32 hp = 2;
     */
    hp: number;
    /**
     * @generated from protobuf field: uint32 str = 3;
     */
    str: number;
    /**
     * @generated from protobuf field: uint32 def = 4;
     */
    def: number;
    /**
     * @generated from protobuf field: uint32 ats = 5;
     */
    ats: number;
    /**
     * @generated from protobuf field: uint32 adf = 6;
     */
    adf: number;
    /**
     * @generated from protobuf field: uint32 dex = 7;
     */
    dex: number;
    /**
     * @generated from protobuf field: uint32 agl = 8;
     */
    agl: number;
    /**
     * @generated from protobuf field: uint32 mov = 9;
     */
    mov: number;
    /**
     * @generated from protobuf field: uint32 spd = 10;
     */
    spd: number;
    /**
     * @generated from protobuf field: repeated kiseki.v1.QuartzLine lines = 11;
     */
    lines: QuartzLine[];
}
/**
 * @generated from protobuf message kiseki.v1.QuartzLine
 */
export interface QuartzLine {
    /**
     * @generated from protobuf field: repeated kiseki.v1.Slot slots = 1;
     */
    slots: Slot[];
    /**
     * index of quartzline to link to
     *
     * @generated from protobuf field: optional uint32 linked_with = 2;
     */
    linkedWith?: number;
}
/**
 * @generated from protobuf message kiseki.v1.Slot
 */
export interface Slot {
    /**
     * @generated from protobuf field: kiseki.v1.Element element = 1;
     */
    element: Element;
    /**
     * @generated from protobuf field: kiseki.v1.Quartz quartz = 2;
     */
    quartz?: Quartz;
    /**
     * @generated from protobuf field: bool fixed = 3;
     */
    fixed: boolean;
    /**
     * @generated from protobuf field: uint32 level = 4;
     */
    level: number;
}
/**
 * @generated from protobuf message kiseki.v1.MasterQuartz
 */
export interface MasterQuartz {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: kiseki.v1.Element element = 2;
     */
    element: Element;
    /**
     * @generated from protobuf field: kiseki.v1.ElementValue value = 3;
     */
    value?: ElementValue;
}
/**
 * @generated from protobuf message kiseki.v1.Quartz
 */
export interface Quartz {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: kiseki.v1.Element element = 2;
     */
    element: Element;
    /**
     * @generated from protobuf field: kiseki.v1.ElementValue value = 3;
     */
    value?: ElementValue;
    /**
     * @generated from protobuf field: string category = 4;
     */
    category: string;
    /**
     * @generated from protobuf field: string effect_str = 5;
     */
    effectStr: string;
    /**
     * @generated from protobuf field: bool has_hit_effect = 6;
     */
    hasHitEffect: boolean;
    /**
     * @generated from protobuf field: uint32 level = 8;
     */
    level: number;
    /**
     * @generated from protobuf field: repeated kiseki.v1.StatsChange stats_bonus = 7;
     */
    statsBonus: StatsChange[];
}
/**
 * @generated from protobuf message kiseki.v1.StatsChange
 */
export interface StatsChange {
    /**
     * @generated from protobuf field: kiseki.v1.Stats stats = 1;
     */
    stats: Stats;
    /**
     * @generated from protobuf field: int32 amount = 2;
     */
    amount: number;
    /**
     * @generated from protobuf field: kiseki.v1.StatsChangeType type = 3;
     */
    type: StatsChangeType;
}
/**
 * @generated from protobuf message kiseki.v1.Art
 */
export interface Art {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: kiseki.v1.ElementValue costs = 2;
     */
    costs?: ElementValue;
}
/**
 * @generated from protobuf message kiseki.v1.ElementValue
 */
export interface ElementValue {
    /**
     * @generated from protobuf field: uint32 earth = 1;
     */
    earth: number;
    /**
     * @generated from protobuf field: uint32 water = 2;
     */
    water: number;
    /**
     * @generated from protobuf field: uint32 fire = 3;
     */
    fire: number;
    /**
     * @generated from protobuf field: uint32 wind = 4;
     */
    wind: number;
    /**
     * @generated from protobuf field: uint32 time = 5;
     */
    time: number;
    /**
     * @generated from protobuf field: uint32 space = 6;
     */
    space: number;
    /**
     * @generated from protobuf field: uint32 mirage = 7;
     */
    mirage: number;
}
/**
 * @generated from protobuf enum kiseki.v1.Element
 */
export enum Element {
    /**
     * @generated from protobuf enum value: ELEMENT_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: ELEMENT_EARTH = 1;
     */
    EARTH = 1,
    /**
     * @generated from protobuf enum value: ELEMENT_WATER = 2;
     */
    WATER = 2,
    /**
     * @generated from protobuf enum value: ELEMENT_FIRE = 3;
     */
    FIRE = 3,
    /**
     * @generated from protobuf enum value: ELEMENT_WIND = 4;
     */
    WIND = 4,
    /**
     * @generated from protobuf enum value: ELEMENT_TIME = 5;
     */
    TIME = 5,
    /**
     * @generated from protobuf enum value: ELEMENT_SPACE = 6;
     */
    SPACE = 6,
    /**
     * @generated from protobuf enum value: ELEMENT_MIRAGE = 7;
     */
    MIRAGE = 7
}
/**
 * @generated from protobuf enum kiseki.v1.Stats
 */
export enum Stats {
    /**
     * @generated from protobuf enum value: STATS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: STATS_HP = 1;
     */
    HP = 1,
    /**
     * @generated from protobuf enum value: STATS_STR = 2;
     */
    STR = 2,
    /**
     * @generated from protobuf enum value: STATS_DEF = 4;
     */
    DEF = 4,
    /**
     * @generated from protobuf enum value: STATS_ATS = 5;
     */
    ATS = 5,
    /**
     * @generated from protobuf enum value: STATS_ADF = 6;
     */
    ADF = 6,
    /**
     * @generated from protobuf enum value: STATS_DEX = 7;
     */
    DEX = 7,
    /**
     * @generated from protobuf enum value: STATS_AGL = 8;
     */
    AGL = 8,
    /**
     * @generated from protobuf enum value: STATS_MOV = 9;
     */
    MOV = 9,
    /**
     * @generated from protobuf enum value: STATS_SPD = 10;
     */
    SPD = 10,
    /**
     * these are not true stats
     *
     * @generated from protobuf enum value: STATS_EVA = 11;
     */
    EVA = 11,
    /**
     * @generated from protobuf enum value: STATS_ACC = 12;
     */
    ACC = 12,
    /**
     * @generated from protobuf enum value: STATS_EP = 13;
     */
    EP = 13,
    /**
     * @generated from protobuf enum value: STATS_RNG = 14;
     */
    RNG = 14
}
/**
 * @generated from protobuf enum kiseki.v1.StatsChangeType
 */
export enum StatsChangeType {
    /**
     * @generated from protobuf enum value: STATS_CHANGE_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: STATS_CHANGE_TYPE_FIXED = 1;
     */
    FIXED = 1,
    /**
     * @generated from protobuf enum value: STATS_CHANGE_TYPE_PERCENT = 2;
     */
    PERCENT = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class Game$Type extends MessageType<Game> {
    constructor() {
        super("kiseki.v1.Game", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "characters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Character },
            { no: 4, name: "master_quartz", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MasterQuartz },
            { no: 5, name: "quartz", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Quartz },
            { no: 6, name: "arts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Art }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message kiseki.v1.Game
 */
export const Game = new Game$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Character$Type extends MessageType<Character> {
    constructor() {
        super("kiseki.v1.Character", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "hp", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "str", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "def", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "ats", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "adf", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "dex", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "agl", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "mov", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "spd", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "lines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QuartzLine }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message kiseki.v1.Character
 */
export const Character = new Character$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuartzLine$Type extends MessageType<QuartzLine> {
    constructor() {
        super("kiseki.v1.QuartzLine", [
            { no: 1, name: "slots", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Slot },
            { no: 2, name: "linked_with", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message kiseki.v1.QuartzLine
 */
export const QuartzLine = new QuartzLine$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Slot$Type extends MessageType<Slot> {
    constructor() {
        super("kiseki.v1.Slot", [
            { no: 1, name: "element", kind: "enum", T: () => ["kiseki.v1.Element", Element, "ELEMENT_"] },
            { no: 2, name: "quartz", kind: "message", T: () => Quartz },
            { no: 3, name: "fixed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "level", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message kiseki.v1.Slot
 */
export const Slot = new Slot$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MasterQuartz$Type extends MessageType<MasterQuartz> {
    constructor() {
        super("kiseki.v1.MasterQuartz", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "element", kind: "enum", T: () => ["kiseki.v1.Element", Element, "ELEMENT_"] },
            { no: 3, name: "value", kind: "message", T: () => ElementValue }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message kiseki.v1.MasterQuartz
 */
export const MasterQuartz = new MasterQuartz$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Quartz$Type extends MessageType<Quartz> {
    constructor() {
        super("kiseki.v1.Quartz", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "element", kind: "enum", T: () => ["kiseki.v1.Element", Element, "ELEMENT_"] },
            { no: 3, name: "value", kind: "message", T: () => ElementValue },
            { no: 4, name: "category", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "effect_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "has_hit_effect", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "level", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "stats_bonus", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StatsChange }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message kiseki.v1.Quartz
 */
export const Quartz = new Quartz$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StatsChange$Type extends MessageType<StatsChange> {
    constructor() {
        super("kiseki.v1.StatsChange", [
            { no: 1, name: "stats", kind: "enum", T: () => ["kiseki.v1.Stats", Stats, "STATS_"] },
            { no: 2, name: "amount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "type", kind: "enum", T: () => ["kiseki.v1.StatsChangeType", StatsChangeType, "STATS_CHANGE_TYPE_"] }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message kiseki.v1.StatsChange
 */
export const StatsChange = new StatsChange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Art$Type extends MessageType<Art> {
    constructor() {
        super("kiseki.v1.Art", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "costs", kind: "message", T: () => ElementValue }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message kiseki.v1.Art
 */
export const Art = new Art$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ElementValue$Type extends MessageType<ElementValue> {
    constructor() {
        super("kiseki.v1.ElementValue", [
            { no: 1, name: "earth", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "water", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "fire", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "wind", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "time", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "space", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "mirage", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message kiseki.v1.ElementValue
 */
export const ElementValue = new ElementValue$Type();
